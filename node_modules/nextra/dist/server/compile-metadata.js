import { createProcessor } from "@mdx-js/mdx";
import remarkFrontmatter from "remark-frontmatter";
import {
  remarkAssignFrontMatter,
  remarkExportOnlyMetadata,
  remarkMdxFrontMatter,
  remarkMdxTitle
} from "./remark-plugins/index.js";
async function compileMetadata(source, { filePath, lastCommitTime }) {
  const format = filePath.endsWith(".mdx") ? "mdx" : "md";
  const compiler = createProcessor({
    format,
    remarkPlugins: [
      remarkFrontmatter,
      // parse and attach yaml node
      remarkMdxFrontMatter,
      remarkMdxTitle,
      [remarkAssignFrontMatter, { lastCommitTime }],
      remarkExportOnlyMetadata
    ],
    recmaPlugins: [recmaExportOnlyMetadata]
  });
  const vFile = await compiler.process({ value: source, path: filePath });
  return vFile.value;
}
const transformer = (ast) => {
  const importReact = ast.body[0];
  ast.body = ast.body.filter(
    (node) => node.type === "ExportNamedDeclaration" && node.declaration.declarations[0].id.name === "metadata"
  );
  ast.body.unshift(importReact);
};
const recmaExportOnlyMetadata = () => transformer;
export {
  compileMetadata
};
