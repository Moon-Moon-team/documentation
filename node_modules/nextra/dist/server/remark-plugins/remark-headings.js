import Slugger from "github-slugger";
import { visit } from "unist-util-visit";
import { MARKDOWN_EXTENSION_RE } from "../constants.js";
const getFlattenedValue = (node) => node.children.map(
  (child) => "children" in child ? getFlattenedValue(child) : "value" in child ? child.value : ""
).join("");
const remarkHeadings = ({ exportName = "toc", isRemoteContent }) => {
  const headings = [];
  const slugger = new Slugger();
  return (ast, file) => {
    const PartialComponentToHeadingsName = /* @__PURE__ */ Object.create(null);
    visit(
      ast,
      [
        "heading",
        // push partial component's `toc` export name to headings list
        "mdxJsxFlowElement",
        // verify .md/.mdx exports and attach named `toc` export
        "mdxjsEsm"
      ],
      (node, _index) => {
        if (node.type === "heading") {
          if (node.depth === 1) {
            return;
          }
          node.data ||= {};
          const headingProps = node.data.hProperties ||= {};
          const value = getFlattenedValue(node);
          const id = slugger.slug(headingProps.id || value);
          headingProps.id = id;
          headings.push({ depth: node.depth, value, id });
          return;
        }
        if (isRemoteContent) {
        } else if (node.type === "mdxjsEsm") {
          for (const child of node.data.estree.body) {
            if (child.type !== "ImportDeclaration") continue;
            const importPath = child.source.value;
            const isMdxImport = MARKDOWN_EXTENSION_RE.test(importPath);
            if (!isMdxImport) continue;
            const componentName = child.specifiers.find(
              (o) => o.type === "ImportDefaultSpecifier"
            )?.local.name;
            if (!componentName) continue;
            const { length } = Object.keys(PartialComponentToHeadingsName);
            const exportAsName = `${exportName}${length}`;
            PartialComponentToHeadingsName[componentName] = exportAsName;
            child.specifiers.push({
              type: "ImportSpecifier",
              imported: { type: "Identifier", name: exportName },
              local: { type: "Identifier", name: exportAsName }
            });
          }
        } else {
          const headingsName = PartialComponentToHeadingsName[node.name];
          if (headingsName) {
            headings.push(headingsName);
          }
        }
      }
    );
    file.data.toc = headings;
  };
};
export {
  getFlattenedValue,
  remarkHeadings
};
