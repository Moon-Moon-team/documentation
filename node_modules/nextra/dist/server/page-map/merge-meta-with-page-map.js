import path from "path";
import { pageTitleFromFilename } from "../utils.js";
function isFolder(value) {
  return !!value && typeof value === "object" && "items" in value && // @ts-expect-error -- fixme
  value.type !== "menu";
}
function normalizeMetaData(obj, map) {
  return Object.fromEntries(
    Object.entries(obj).map(([key, value]) => {
      let val;
      if (isFolder(value)) {
        const { items: _items, ...rest } = value;
        val = rest;
      } else {
        val = value;
      }
      return [key, map[key] ? val : val || pageTitleFromFilename(key)];
    })
  );
}
function mergeMetaWithPageMap(pageMap, meta) {
  if ("children" in pageMap) {
    return {
      ...pageMap,
      children: mergeMetaWithPageMap(pageMap.children, meta)
    };
  }
  const result = pageMap.map(({ __pagePath, ...restParent }) => {
    if ("children" in restParent) {
      restParent.children = mergeMetaWithPageMap(
        restParent.children,
        // @ts-expect-error -- fixme
        meta[restParent.name]?.items || {}
      );
      return restParent;
    }
    return restParent;
  });
  const hasMeta = "data" in result[0];
  if (hasMeta) {
    const childRoute = result[1].route;
    const { dir } = path.parse(childRoute);
    const metaPath = `${dir.replace(/^\/$/, "")}/_meta`;
    throw new Error(
      [
        "Merging an `_meta.global` file with a folder-specific `_meta` is unsupported.",
        `Move content of \`${metaPath}\` file into the \`_meta.global\` file`
      ].join("\n")
    );
  }
  result.unshift({
    data: normalizeMetaData(
      meta,
      // @ts-expect-error -- fixme
      Object.fromEntries(result.map((key) => [key.name, key.frontMatter]))
    )
  });
  return result;
}
export {
  mergeMetaWithPageMap
};
